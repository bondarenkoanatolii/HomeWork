ДЗ 4. Наследование

1. Создать классы Собака и Кот с наследованием от класса Животное.

2. Все животные могут бежать и плыть. В качестве параметра каждому методу передается длина препятствия.
Результатом выполнения действия будет печать в консоль. (Например, dogBobik.run(150); -> 'Бобик пробежал 150 м.');

3. У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.; плавание: кот не умеет плавать,
 собака 10 м.).

4. * Добавить подсчет созданных котов, собак и животных.
=========================================================

ДЗ 5. Полиморфизм в Java

0. Создать базовый интерфейс для геометрической фигуры, в котором есть метод который возвращает площадь фигуры.
Создать 3 класса которые реализуют этот интерфейс: круг, треугольник, квадрат.
Создать массив фигур, и написать метод который выведет суммарную площадь всех фигур в этом массив

1. Создайте тип данных Участник и несколько его реализаций: Человек, Кот, Робот.

2. Классы из п.2 должны обладать поведением бегать и прыгать (методы просто выводят информацию о действии в консоль).

3. Создайте тип данных Препятствие и несколько его реализаций: Беговая Дорожка и Стена.

4. Классы из п.3 должны обладать поведением преодолеть препятствие (overcome).

5. Наладить взаимодействие между Участником и Препятствием.
Другими словами, участники при прохождении через препятствия должны выполнять соответствующие действия (бежать
или прыгать). Например: Человек пробежал беговую дорожку.

6. Создайте два массива: с участниками и препятствиями.

7. Каждый элемент из массива с участниками должен пройти каждое препятствие из массива с препятствиями.

8. * У препятствий есть длина (для дорожки) или высота (для стены), а участников ограничения на бег и прыжки. Если
участник не смог пройти одно из препятствий, то к следующему он не приступает (полностью выбывает из участия в серии
препятствий).

9. * Результат выполнения участником конкретного препятствия выводить в консоль.
Например: "Участник[ИМЯ] прошел препятствие[НАЗВАНИЕ] на дистанции[ЗНАЧЕНИЕ]"
"Участник[ИМЯ] не прошел препятствие[НАЗВАНИЕ] на дистанции[ЗНАЧЕНИЕ]. Пройдено[ЗНАЧЕНИЕ]"

==========================================================================================

ДЗ 8. Stream API

ВАЖНО! Все задания выполняются исключительно с применением Stream API

1.1 Дан класс Product, который состоит из свойств:
- тип
- цена
1.2 Реализовать метод получения всех продуктов в виде списка, категория которых эквивалентна “Book” и цена более чем 250.

2.1 Дан класс Product, который состоит из свойств:
- тип
- цена
- возможность применения скидки
2.2 Реализовать метод получения всех продуктов в виде списка, категория которых эквивалентна “Book” и
с возможностью применения скидки. Финальный список должен содержать продукты с уже примененной скидкой 10%.
Так если Продукт A был с ценой 1.0 USD, то его финальная цена будет оставлять 0.9 USD

3.1 Дан класс Product, который состоит из свойств:
- тип
- цена
- возможность применения скидки
3.2 Реализовать метод получения самого дешевого продукта из категории “Book”
3.3 В случае, если ни один продукт не найден (ситуация, когда нет продукта с искомой категорией), выбросить исключение
с сообщением “Продукт [категория: имя_категории] не найден”.

4.1 Дан класс Product, который состоит из свойств:
- тип
- цена
- возможность применения скидки
- дата добавления (можно использовать тип данных java.time.LocalDate, java.time.LocalDateTime или java.util.Date)
4.2 Реализовать метод получения трех последних добавленных продуктов

5.1 Дан класс Product, который состоит из свойств:
- тип
- цена
- возможность применения скидки
- дата добавления (можно использовать тип данных java.time.LocalDate, java.time.LocalDateTime или java.util.Date)

5.2 Реализовать метод калькуляции общей стоимости продуктов, которые отвечаю следующим критериям:
- продукт добавлен в течении текущего года
- продукт имеет тип “Book”
- цена продукта не превышает 75

** 6.1 Дан класс Product, который состоит из свойств:
- идентификационный номер
- тип
- цена
- возможность применения скидки
- дата добавления (можно использовать тип данных java.time.LocalDate, java.time.LocalDateTime или java.util.Date)
** 6.2 Реализовать метод группирования объектов по типу продукта. Таким образом результатом выполнения метода
будет тип данных “Словарь” хранящий пару ключ-значение: {тип: список_продуктов}

Например:
{
	“Book”,
	[
		{type: “Book”, price: 100, discount: false, createDate: 01-01-2022},
		{…},
		{…}
	]
},
{
	“Toy”,
	[
		{type: “Toy”, price: 100, discount: true, createDate: 10–102022},
		{…}
	]
}

==========================================================================================
ДЗ 9. Многопоточность

1. Создать класс ValueCalculator

2. В классе ValueCalculator добавить:
- свойство-массив из вещественных чисел
- свойство, что отображает размер массива (минимально 1 000 000)
- свойство, что отображает половину размера массива

3. В классе ValueCalculator добавить метод doCalc. Метод выполняет:
- Засечь время старта выполнения метода: long start = System.currentTimeMillis()
- Заполнить массив единицами или любыми другими одинаковыми значениями
- Разбить массив на два массива одинаковой величины:

Пример деления одного массива на два:
System.arraycopy(arr, 0, a1, 0, half);
System.arraycopy(arr, half, a2, 0, half);

- Создать два потока, в каждом из которых пройтись по одному из ранее полученных массивов.

Присвоить его значениям новые значения, сфорированные выражением:
(float)(arr[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2))

- Выполнить обратную склейку двух массивов в один изначальный

Пример обратной склейки:
System.arraycopy(a1, 0, arr, 0, h);
System.arraycopy(a2, 0, arr, h, h);

- Вычислить затраченное время от старта до завершения программы и вывод его в консоль.

==========================================================================================

ДЗ 10. Многопоточность 2

0.1 Создать класс ThreadSafeList. Класс имплементризрует потокобезопасную коллекцию.

0.1 Реализовать методы: add, remove, get

0.2 Методы должны быть реализованы с учетом того, что они будут использоваться в конкурентной (многопоточной) среде.

1.1 Создать класс PetrolStation. Класс имплементризрует заправочную станцию.

1.2 Класс PetrolStation содержит свойство вещественного типа  с именем amount. Данное свойство представляет количество
топлива на станции.

1.3 В классе PetrolStation реализовать метод doRefuel. Метод принимает значение вещественного типа. При выполнении
данного метода идет вычитание запрашиваемого топлива из доступного количества.

1.4 Одна заправка занимает время от 3-10 секунд. После истечении времени ожидания, осуществляет вычитание значения из п.5

1.5 Заправочная станция может одновременно обслуживать не более 3 запросов.

==========================================================================================

ДЗ 11. Створенні структури бази данних

Створити структуру бази "Book store"
В базі має бути 2 таблички "Books" і "Authors".
в таблиці Authors повинні бути наступні колонки:
id
Name
LastName

в таблиці Books повинні бути наступні колонки:
id
Title
AuthorId
де AuthorId це посилання на автора з таблиці Authors , який написав цю книгу (це поле може бути null, коли автор
невідомий).
У одного автора може бути кілька книг.
У однієї книги тільки один автор.

В таблиці треба додати по кілька елементів (близько 5-10).
На існуючій базі написати 4 запита

Вибрати з бази всі книги, та авторів, які їх написали. Для книг без автора поле залишиться null. Результат повинен
містити поля BookTitle, AuthorName, AuthorLastName (використовуйте псевдоніми).
Вибрати всі книги без автора. Результат повинен містити BookTitle.
Вибрати з бази всіх авторів, та кількість книг які вони написали. Результат повинен містити поля AuthorName,
AuthorLastName, BookCount.
Вибрати з бази всіх авторів, які написали більше двох книг. Результат повинен містити поля AuthorName, AuthorLastName,
BookCount.

У якості виконаного ДЗ, створіть текстовий файли з усіма DDL та DML
=====================================================================
ДЗ 12. JDBC
За допомогою JDBC підключити базу, яку ми створили на попередній домашці, до java програми.
Створити класи Book і Author відповідно до таблиць.
Прочитати в ліст книги, разом з автором.
Вивести на екран результати віконання запитів 1-4

=====================================================================
ДЗ 13. Аннотации. Рефлексия
0. Создать класс TestRunner, который может выполнять “методы-тесты”. В качестве тестов выступают “классы-тесты”
с наборами методов.
ВАЖНО! Класс-тест - это просто класс, что содержит набор методов с аннотациями @Test, @BeforeSuite, @AfterSuite

1. Создать аннотации: @Test, @BeforeSuite, @AfterSuite. Данные аннотация применимы лишь к методам.
ВАЖНО! Аннотация @Test свидетельствует о том, что данным метод является “методом-тестом”.

2. В классе TestRunner создать статический метод start, что принимает качестве параметра объект типа Class.

3. Из «класса-теста» вначале должен быть запущен метод с аннотацией @BeforeSuite, если такой имеется, далее запущены
методы с аннотациями @Test, а по завершению всех тестов – метод с аннотацией @AfterSuite.

4. К каждому  методу-тесту необходимо также добавить приоритеты (int числа от 1 до 10), в соответствии с которыми
будет выбираться порядок их выполнения, если приоритет одинаковый, то порядок не имеет значения.

5. Методы с аннотациями @BeforeSuite и @AfterSuite в пределах одного “класса-теста” должны присутствовать
в единственном экземпляре, иначе необходимо выбросить исключение.

6. В “методах-тестах” выполнить выведение в консоль произвольного значения, для идентификации действительности
выполнения данного метода.
